interface Iterator<T> {
    fun next(): T
    fun next?(): Bool
    fun iter(): Iterator<T>
}

interface Iterable<T> {
    fun iter(): Iterator<T> // TODO: Make these kinds of interfaces 'special' and predefined at time of typechecking
} // Or maybe just duck typing in general??

fun map<T, R>(iterable: Iterable<T>, func: (T) => R): List<R> {
    var result: List<R> = []

//    for (item in iterable) {
//        result.push(func(item))
//    }

    var f: (T) => R = func
//    var res: R = func(iter.next())

    for (var iter = iterable.iter(); iter.next?();) {
        var item = iter.next()
        result.push(
            func(item)
        )
    }

    return result
}

fun filter<T>(iterable: Iterable<T>, func: (T) => Boolean): List<R> {
    var result: List<R> = []

    for (var iter = iterable.iter(); iter.next?();) {
        var item = iter.next()
        if (func(item)) {
            result.push(item)
        }
    }

    return result
}

interface Addend {
    fun add()
}

fun sum<T extends Addend>(iterable: Iterable<T>) {
    for (var iter = iterable.iter(); iter.next?();) {
        var item = iter.next()
        result = result + item
    }

    return result
}

fun sum<T extends Addend>(iterable: Iterable<T>, initial: T) {
    var result: T = initial // ReturnValue<T.add>?
    for (var iter = iterable.iter(); iter.next?();) {
        var item = iter.next()
        result = result + item
    }

    return result
}

class ListIterator<Iterator> {
    var index: number
    var list: List

    fun init(list: List) {
        this.list = list
        this.index = 0
    }

    fun iter() {
        return this
    }

    fun next() {
        var result = this.list[this.index]
        this.index = this.index + 1
        return result
    }

    fun next?() {
        return this.index < this.list.length()
    }
}
